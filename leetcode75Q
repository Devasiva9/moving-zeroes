
 Explanation of `moveZeroes` Method

The `moveZeroes` method is designed to move all zeroes in an array `nums` to the end while maintaining the relative order of the non-zero elements. This is achieved in-place with a time complexity of O(n), where n is the number of elements in the array. Here's a step-by-step breakdown of the code:

 Code:

java
class Solution {
    public void moveZeroes(int[] nums) {
        int j = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != 0) {
                int temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;
                j++;
            }
        }
    }
}

#### Explanation:

1. **Initialization**:
   - We initialize a pointer `j` to 0. This pointer will track the position where the next non-zero element should be placed.

2. **Iteration**:
   - We use a for loop to iterate over the array `nums` with the index `i` ranging from 0 to `nums.length - 1`.

3. **Check for Non-Zero Elements**:
   - Within the loop, we check if the current element `nums[i]` is non-zero.

4. **Swapping Elements**:
   - If `nums[i]` is non-zero, we perform a swap between `nums[i]` and `nums[j]`. This effectively moves the non-zero element to the front of the array while pushing the zero towards the end.
   - After the swap, we increment the pointer `j` to point to the next position for potential non-zero elements.

5. **Result**:
   - By the end of the loop, all non-zero elements will be shifted to the front of the array in their original order, and all zeroes will be moved to the end.
 Example:

For `nums = [0, 1, 0, 3, 12]`, the method will modify the array in the following steps:
1. Initial array: `[0, 1, 0, 3, 12]`
2. After processing `1`: `[1, 0, 0, 3, 12]`
3. After processing `3`: `[1, 3, 0, 0, 12]`
4. After processing `12`: `[1, 3, 12, 0, 0]`

Final array: `[1, 3, 12, 0, 0]`

This method ensures that the order of non-zero elements is preserved, and all zeroes are moved to the end of the array efficiently.

